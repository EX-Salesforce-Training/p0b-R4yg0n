/////////////////////////////////////////////////////////////////
//
// Name: Project 0 Bravo
// Author: Matt Carey
// Date: 02/28/2020
// Update: 03/01/2020
// Description: Series of apex methods to demonstrate
// basic understanding of coding concepts.
//
/////////////////////////////////////////////////////////////////
@isTest
public class ClassB {
    @isTest static void nFibonacciTest(){
            //Initialize a variable that will store the result of the Fibonacci Method
            integer intProjFibValue = Project0B.nFibonacci(0);

            //Call a system assertion that will compare the result of what should
            //come out against the actual result stored in a variable and run this
            //test four times
            System.assertEquals(0,intProjFibValue);

            // Second test
            intProjFibValue = Project0B.nFibonacci(1);
            System.assertEquals(1,intProjFibValue);

            // Third test
            intProjFibValue = Project0B.nFibonacci(2);
            System.assertEquals(1,intProjFibValue);

            // Fourth test
            intProjFibValue = Project0B.nFibonacci(10);
            System.assertEquals(55,intProjFibValue);
            //System.debug(intProjFibValue);

        }

        //Test for sorting through an array of integers
        @isTest static void intSortTest(){
            integer[] firstArr = new integer[]{2,4,5,1,3,1};
            integer[] firstArrResult = new integer[]{1,1,2,3,4,5};
                
            integer[] secArr = new integer[]{5,4,3,2,1};
            integer[] secArrResult = new integer[]{1,2,3,4,5};
            //Initialize a variable that will store the result of the Sort Method
            integer[] intSortResult = Project0B.sortArray(firstArr);

            //Call a system assertion that will compare the result of what should
            //come out against the actual result stored in a variable and run this twice
            System.assertEquals(firstArrResult,intSortResult);
            
            intSortResult = Project0B.sortArray(secArr);
            System.assertEquals(secArrResult, intSortResult);
        }

        //Test the method that returns a factorial of an integer
        @isTest static void intFactorialTest(){
            //Initialize a variable that will store the result of the Factorial Method
            integer intFactResult = Project0B.nFactorial(0);

            //Call a system assertion that will compare the result of what should
            //come out against the actual result stored in a variable and run this three times
            System.assertEquals(1,intFactResult);
            
            intFactResult = Project0B.nFactorial(1);
            System.assertEquals(1, intFactResult);
            
            intFactResult = Project0B.nFactorial(3);
            System.assertEquals(6, intFactResult);
        }

        //Test the method that returns an array that has been rotated
        @isTest static void intLeftRotTest(){
            integer[] firstArr = new integer[]{1,2,3,4,5};
            
            integer[] firstArrResult = new integer[]{2,3,4,5,1};
            integer[] secArrResult = new integer[]{2,3,4,5,1};
            integer[] thirdArrResult = new integer[]{4,5,1,2,3};
            //Initialize a variable that will return the array result after being rotated left
            integer[] intLeftRotResult = Project0B.rotateLeftNTimes(firstArr,1);

            //Call a system assertion that will compare the result of what should
            //come out against the actual result stored in a variable and run this three times
            System.assertEquals(firstArrResult,intLeftRotResult);
            
            intLeftRotResult = Project0B.rotateLeftNTimes(firstArr, 6);
            System.assertEquals(secArrResult, intLeftRotResult);
            
            intLeftRotResult = Project0B.rotateLeftNTimes(firstArr, 3);
            System.assertEquals(thirdArrResult, intLeftRotResult);
        }

        //Test the method that returns a boolean value if the string that is passed is
        //balanced or not
        @isTest static void boolBracketTest(){
            //Initialize a variable that will store the value of what is returned from
            //the bool check
            boolean bBracketTest = Project0B.bracketsAreBalanced('()');
            
            //Call a system assertion that will compare the array result after checking if
            //the string of braces sent is balanced or not and run this 6 times
            System.assertEquals(true,bBracketTest);
            
            bBracketTest = Project0B.bracketsAreBalanced('(()');
            System.assertEquals(false,bBracketTest);
            
            bBracketTest = Project0B.bracketsAreBalanced('() ()');
            System.assertEquals(true,bBracketTest);
            
            bBracketTest = Project0B.bracketsAreBalanced('(');
            System.assertEquals(false,bBracketTest);
            
            bBracketTest = Project0B.bracketsAreBalanced(')');
            System.assertEquals(false,bBracketTest);
            
            bBracketTest = Project0B.bracketsAreBalanced('(())');
            System.assertEquals(true,bBracketTest);
        }
}