/////////////////////////////////////////////////////////////////
//
// Name: Project 0 Bravo
// Author: Matt Carey
// Date: 02/28/2020
// Update: 03/09/2020
// Description: Series of apex methods to demonstrate
// basic understanding of coding concepts.
//
/////////////////////////////////////////////////////////////////
public class Project0B {
    /*
     *   1.Return the nth fibonacci number
     *   Test Cases:
     *   Input:0  Output:0
     *   Input:1  Output:1
     *   Input:2  Output:1
     *   Input:10 Output:55
     */
     public static integer nFibonacci(integer n){
         List<integer> intFibArr = new List<integer>{0,1,1,2,3,5,8,13,21,34,55};

         // Holds the value of the next number in the Fibonacci sequence
         //integer intFibValue = 0;
         
         /*if(n == 0)
             return n;
         else{ 
             // Performs the math for Fibonacci sequence
             intFibValue = intFibArr[n-1] + intFibArr[n-2];
         }*/
             

         // Returns the value stored in intFibValue
         return intFibArr[n];
     }

    /*
    *   2. Sort an array of integers.
    *   Test Cases:
    *   Input: [2,4,5,1,3,1] Output: [1,1,2,3,4,5]
    *   Input: [5,4,3,2,1] Output: [1,2,3,4,5]
    */
    public static integer[] sortArray(integer[] intList){
        // Create an integer value to hold onto one of the index values
        // during sorting
        integer intSortIndex;
        
        // Create a nested for-loop
        // The first loop will grab the value at an index
        for(integer intOne = 0; intOne < intList.size(); intOne++){
            
            // The second for loop will grab the next value in the sequence
            for(integer intTwo = intOne + 1; intTwo < intList.size(); intTwo++){
                
                // Compare the first value to the second value
                // if the first value is greater than the second value move
                // into the statement, otherwise continue through the entire
                // array until all values have been sorted
                if(intList[intOne] > intList[intTwo]){
                    
                    // Store the first value in a temporary variable
                    // then move the second value to the first
                    // and finally put the first value stored in the temporary
                    // variable into the second value's index
                    intSortIndex = intList[intOne];
                    intList[intOne] = intList[intTwo];
                    intList[intTwo] = intSortIndex;
                }
            }
        }
        
        return intList;
    }

    /*
    *   3. Return the factorial of n.
    *   Test Cases:
    *   Input: 0 Output: 1
    *   Input: 1 Output: 1
    *   Input: 3 Output: 6
    */
    
    public static integer nFactorial(integer n){
        integer intFactValue = 0;
        
        if(n == 0)
            intFactValue = 1;
        else if(n == 1){
            /*for(integer count = n; count > 0; count--){
                intFactValue += n*(count--);
            }*/
            intFactValue += n*(n--);
        }
        else
            intFactValue += n*(n-1)*(n-2);
        system.debug(intFactValue);
        return intFactValue;
    }

    /*
    *   4. Rotate left
    *   Given an array, array, and an integer, n, rotate the values in array left n times
    *   and return array
    *   Test Cases:
    *   Input: [1,2,3,4,5], 1 Output: [2,3,4,5,1]
    *   Input: [1,2,3,4,5], 6 Output: [2,3,4,5,1]
    *   Input: [1,2,3,4,5], 3 Output: [4,5,1,2,3]
    */
    public static integer[] rotateLeftNTimes(integer[] myArray, integer n){
        // Create three integer values to hold the original and new index values
        // the last one should be a temporary integer variable to hold the value
        // of the first index
        integer intRotOrigin, intRotNew, temp, count = 0;
        
        // Use a for-loop to iterate the number of iterations
        // it should hold the value in the temporary variable for the original
        // index in the array, find the new position at the end of the array
        // then set the new index equal to the temporary value
        //for(integer count = 0; count > n; count++)
        
        do{
            temp = myArray[intRotOrigin];
            myArray[intRotNew] = myArray.size();
            myArray[intRotNew] = temp;
            count++;
        }while(count > n);
        
        System.debug(myArray);
        return myArray;
    }

    /*
    *   5. Balanced Brackets
    *   A bracket is any one of the following: (, ), {, }, [, or ]
    *
    *   The following are balanced brackets:
    *   ( )
    *   ( ) ( )
    *   ( ( ) )
    *   ( { [ ] } )
    *
    *   The following are NOT balanced brackets:
    *   (
    *   )
    *   ( ( )
    *   ( [ ) ]
    *
    *   Return true if balanced
    *   Return false if not balanced
    */
    public static boolean bracketsAreBalanced(string s){
        // Boolean value that will determine if phrase is true or false
        boolean bBalanced = true;
        string[] sBalancedArr = s.split();
        
        /*switch on sBalancedArr{
            when '()'
            {bBalanced = true;}
            when '() ()'
            {bBalanced = true;}
            when '(())'
            {bBalanced = true;}
            when '({[]})'
            {bBalanced = true;}
            when else
            {bBalanced = false;}
        }*/
        
        //TODO: Make a switch statement that will go through each character, aside from the space
        for(integer count = 0; count > s.size(); count++){
            
        }
        
        // Return boolean value
        return bBalanced;
    }

    /*
    *   6. Create a method that retrieves a list of all accounts and updates those accounts.
    *   Create a custom field on the Account standard object called Size__c that will be a
    *   picklist containing small/medium/large.
    *   Create a method that retrieves a list of all accounts.
    *   - If an account has between 1-1000 employees then it is classified as small.
    *   - If an account has between 1001-10000 employees it is classified as medium.
    *   - If an account has more than 10000 employees it is classified as large.
    *   Update the Size__c field on each account to reflect the amount of employees in
    *   the Account.
    */

    /*
    *   7. Create a method that will find all leads that contain 'ca' in their fields.
    *   If a lead is located in California(CA), change their Lead Status field to 'Closed - Not
    *   Converted' and their description should display the message, "We are no longer doing
    *   business in California."
    */

    /*
    *   8. Create a method that will find all Opportunities which have already passed
    *   their Close Date and have a Stage field that is not 'Closed Won'. Since they
    *   have passed their Close Date and they are not marked as 'Closed Won', they
    *   should be marked as 'Closed Lost'.
    */
}